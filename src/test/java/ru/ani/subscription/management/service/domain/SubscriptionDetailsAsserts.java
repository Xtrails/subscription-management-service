package ru.ani.subscription.management.service.domain;

import static org.assertj.core.api.Assertions.assertThat;
import static ru.ani.subscription.management.service.domain.AssertUtils.bigDecimalCompareTo;

public class SubscriptionDetailsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscriptionDetailsAllPropertiesEquals(SubscriptionDetails expected, SubscriptionDetails actual) {
        assertSubscriptionDetailsAutoGeneratedPropertiesEquals(expected, actual);
        assertSubscriptionDetailsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscriptionDetailsAllUpdatablePropertiesEquals(SubscriptionDetails expected, SubscriptionDetails actual) {
        assertSubscriptionDetailsUpdatableFieldsEquals(expected, actual);
        assertSubscriptionDetailsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscriptionDetailsAutoGeneratedPropertiesEquals(SubscriptionDetails expected, SubscriptionDetails actual) {
        assertThat(actual)
            .as("Verify SubscriptionDetails auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscriptionDetailsUpdatableFieldsEquals(SubscriptionDetails expected, SubscriptionDetails actual) {
        assertThat(actual)
            .as("Verify SubscriptionDetails relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getPrice()).as("check price").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getPrice()))
            .satisfies(a -> assertThat(a.getDuration()).as("check duration").isEqualTo(expected.getDuration()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscriptionDetailsUpdatableRelationshipsEquals(SubscriptionDetails expected, SubscriptionDetails actual) {
        assertThat(actual)
            .as("Verify SubscriptionDetails relationships")
            .satisfies(a -> assertThat(a.getSourceApplication()).as("check sourceApplication").isEqualTo(expected.getSourceApplication()));
    }
}
