package ru.ani.subscription.management.service.domain;

import static org.assertj.core.api.Assertions.assertThat;
import static ru.ani.subscription.management.service.domain.AssertUtils.bigDecimalCompareTo;

public class PaymentDaoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentDaoAllPropertiesEquals(PaymentDao expected, PaymentDao actual) {
        assertPaymentDaoAutoGeneratedPropertiesEquals(expected, actual);
        assertPaymentDaoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentDaoAllUpdatablePropertiesEquals(PaymentDao expected, PaymentDao actual) {
        assertPaymentDaoUpdatableFieldsEquals(expected, actual);
        assertPaymentDaoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentDaoAutoGeneratedPropertiesEquals(PaymentDao expected, PaymentDao actual) {
        assertThat(actual)
            .as("Verify PaymentDao auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentDaoUpdatableFieldsEquals(PaymentDao expected, PaymentDao actual) {
        assertThat(actual)
            .as("Verify PaymentDao relevant properties")
            .satisfies(a ->
                assertThat(a.getAmount()).as("check amount").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getAmount())
            )
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getPaymentDttm()).as("check paymentDttm").isEqualTo(expected.getPaymentDttm()))
            .satisfies(a -> assertThat(a.getHashSum()).as("check hashSum").isEqualTo(expected.getHashSum()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentDaoUpdatableRelationshipsEquals(PaymentDao expected, PaymentDao actual) {
        assertThat(actual)
            .as("Verify PaymentDao relationships")
            .satisfies(a -> assertThat(a.getClientSubscription()).as("check clientSubscription").isEqualTo(expected.getClientSubscription())
            )
            .satisfies(a -> assertThat(a.getUser()).as("check user").isEqualTo(expected.getUser()))
            .satisfies(a ->
                assertThat(a.getClietntSubscription()).as("check clietntSubscription").isEqualTo(expected.getClietntSubscription())
            )
            .satisfies(a -> assertThat(a.getPaymentSystem()).as("check paymentSystem").isEqualTo(expected.getPaymentSystem()));
    }
}
