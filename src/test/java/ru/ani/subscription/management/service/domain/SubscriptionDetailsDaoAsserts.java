package ru.ani.subscription.management.service.domain;

import static org.assertj.core.api.Assertions.assertThat;
import static ru.ani.subscription.management.service.domain.AssertUtils.bigDecimalCompareTo;

public class SubscriptionDetailsDaoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscriptionDetailsDaoAllPropertiesEquals(SubscriptionDetailsDao expected, SubscriptionDetailsDao actual) {
        assertSubscriptionDetailsDaoAutoGeneratedPropertiesEquals(expected, actual);
        assertSubscriptionDetailsDaoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscriptionDetailsDaoAllUpdatablePropertiesEquals(
        SubscriptionDetailsDao expected,
        SubscriptionDetailsDao actual
    ) {
        assertSubscriptionDetailsDaoUpdatableFieldsEquals(expected, actual);
        assertSubscriptionDetailsDaoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscriptionDetailsDaoAutoGeneratedPropertiesEquals(
        SubscriptionDetailsDao expected,
        SubscriptionDetailsDao actual
    ) {
        assertThat(actual)
            .as("Verify SubscriptionDetailsDao auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscriptionDetailsDaoUpdatableFieldsEquals(SubscriptionDetailsDao expected, SubscriptionDetailsDao actual) {
        assertThat(actual)
            .as("Verify SubscriptionDetailsDao relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getPrice()).as("check price").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getPrice()))
            .satisfies(a ->
                assertThat(a.getPriceByMonth())
                    .as("check priceByMonth")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getPriceByMonth())
            )
            .satisfies(a -> assertThat(a.getDuration()).as("check duration").isEqualTo(expected.getDuration()))
            .satisfies(a -> assertThat(a.getActive()).as("check active").isEqualTo(expected.getActive()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscriptionDetailsDaoUpdatableRelationshipsEquals(
        SubscriptionDetailsDao expected,
        SubscriptionDetailsDao actual
    ) {
        assertThat(actual)
            .as("Verify SubscriptionDetailsDao relationships")
            .satisfies(a -> assertThat(a.getSourceApplication()).as("check sourceApplication").isEqualTo(expected.getSourceApplication()))
            .satisfies(a ->
                assertThat(a.getSubscriptionAccesses()).as("check subscriptionAccesses").isEqualTo(expected.getSubscriptionAccesses())
            );
    }
}
