package ru.aniscan.subscription.management.service.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ClientSubscriptionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientSubscriptionAllPropertiesEquals(ClientSubscription expected, ClientSubscription actual) {
        assertClientSubscriptionAutoGeneratedPropertiesEquals(expected, actual);
        assertClientSubscriptionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientSubscriptionAllUpdatablePropertiesEquals(ClientSubscription expected, ClientSubscription actual) {
        assertClientSubscriptionUpdatableFieldsEquals(expected, actual);
        assertClientSubscriptionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientSubscriptionAutoGeneratedPropertiesEquals(ClientSubscription expected, ClientSubscription actual) {
        assertThat(expected)
            .as("Verify ClientSubscription auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientSubscriptionUpdatableFieldsEquals(ClientSubscription expected, ClientSubscription actual) {
        assertThat(expected)
            .as("Verify ClientSubscription relevant properties")
            .satisfies(e -> assertThat(e.getStartDate()).as("check startDate").isEqualTo(actual.getStartDate()))
            .satisfies(e -> assertThat(e.getEndDate()).as("check endDate").isEqualTo(actual.getEndDate()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientSubscriptionUpdatableRelationshipsEquals(ClientSubscription expected, ClientSubscription actual) {
        assertThat(expected)
            .as("Verify ClientSubscription relationships")
            .satisfies(e -> assertThat(e.getUser()).as("check user").isEqualTo(actual.getUser()))
            .satisfies(e -> assertThat(e.getSubscriptionType()).as("check subscriptionType").isEqualTo(actual.getSubscriptionType()))
            .satisfies(e -> assertThat(e.getSourceApplication()).as("check sourceApplication").isEqualTo(actual.getSourceApplication()));
    }
}
