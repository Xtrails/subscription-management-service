package ru.aniscan.subscription.management.service.domain;

import static org.assertj.core.api.Assertions.assertThat;
import static ru.aniscan.subscription.management.service.domain.AssertUtils.bigDecimalCompareTo;

public class ReferralProgramAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReferralProgramAllPropertiesEquals(ReferralProgram expected, ReferralProgram actual) {
        assertReferralProgramAutoGeneratedPropertiesEquals(expected, actual);
        assertReferralProgramAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReferralProgramAllUpdatablePropertiesEquals(ReferralProgram expected, ReferralProgram actual) {
        assertReferralProgramUpdatableFieldsEquals(expected, actual);
        assertReferralProgramUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReferralProgramAutoGeneratedPropertiesEquals(ReferralProgram expected, ReferralProgram actual) {
        assertThat(expected)
            .as("Verify ReferralProgram auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReferralProgramUpdatableFieldsEquals(ReferralProgram expected, ReferralProgram actual) {
        assertThat(expected)
            .as("Verify ReferralProgram relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e ->
                assertThat(e.getRewardAmount())
                    .as("check rewardAmount")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getRewardAmount())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReferralProgramUpdatableRelationshipsEquals(ReferralProgram expected, ReferralProgram actual) {
        assertThat(expected)
            .as("Verify ReferralProgram relationships")
            .satisfies(e -> assertThat(e.getSourceApplication()).as("check sourceApplication").isEqualTo(actual.getSourceApplication()));
    }
}
