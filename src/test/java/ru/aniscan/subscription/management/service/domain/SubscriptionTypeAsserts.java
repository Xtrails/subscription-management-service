package ru.aniscan.subscription.management.service.domain;

import static org.assertj.core.api.Assertions.assertThat;
import static ru.aniscan.subscription.management.service.domain.AssertUtils.bigDecimalCompareTo;

public class SubscriptionTypeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscriptionTypeAllPropertiesEquals(SubscriptionType expected, SubscriptionType actual) {
        assertSubscriptionTypeAutoGeneratedPropertiesEquals(expected, actual);
        assertSubscriptionTypeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscriptionTypeAllUpdatablePropertiesEquals(SubscriptionType expected, SubscriptionType actual) {
        assertSubscriptionTypeUpdatableFieldsEquals(expected, actual);
        assertSubscriptionTypeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscriptionTypeAutoGeneratedPropertiesEquals(SubscriptionType expected, SubscriptionType actual) {
        assertThat(expected)
            .as("Verify SubscriptionType auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscriptionTypeUpdatableFieldsEquals(SubscriptionType expected, SubscriptionType actual) {
        assertThat(expected)
            .as("Verify SubscriptionType relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getPrice()).as("check price").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getPrice()))
            .satisfies(e -> assertThat(e.getDuration()).as("check duration").isEqualTo(actual.getDuration()))
            .satisfies(e -> assertThat(e.getVisible()).as("check visible").isEqualTo(actual.getVisible()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubscriptionTypeUpdatableRelationshipsEquals(SubscriptionType expected, SubscriptionType actual) {
        assertThat(expected)
            .as("Verify SubscriptionType relationships")
            .satisfies(e -> assertThat(e.getSourceApplication()).as("check sourceApplication").isEqualTo(actual.getSourceApplication()));
    }
}
