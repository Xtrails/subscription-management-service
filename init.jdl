//jhipster jdl initinit.jdl --force
//Запустите JHipster с помощью --incremental-changelogопции anytime, чтобы включить его.

//application {
//  config {
//    baseName subscriptionManagementServiceBack
//    applicationType monolith
//    authenticationType oauth2
//    buildTool gradle
//    clientFramework vue
//    languages [en, ru]
//    packageName ru.ani.subscription.management.service
//    prodDatabaseType postgresql
//    skipClient true
//  }
//  entities *
//  dto * with mapstruct
//}
//
//application {
//  config {
//    baseName subscriptionManagementServiceFront
//    applicationType monolith
//    authenticationType oauth2
//    buildTool gradle
//    clientFramework vue
//    languages [en, ru]
//    packageName ru.ani.subscription.management.service
//    prodDatabaseType postgresql
//    skipServer true
//  }
//  entities *
//  dto * with mapstruct
//}
//
//deployment {
//  deploymentType kubernetes
//  appsFolders [subscriptionManagementServiceFront, subscriptionManagementServiceBack]
//  dockerRepositoryName "subscriptionManagementService"
//}

application {
  config {
    baseName subscriptionManagementService
    applicationType monolith
    authenticationType oauth2
    buildTool gradle
    clientFramework vue
    languages [en, ru]
    packageName ru.ani.subscription.management.service
    prodDatabaseType postgresql
    dtoSuffix Dto
    entitySuffix Dao
    reactive false
    nativeLanguage ru
    clientThemeVariant dark
  }
  entities *
  dto * with mapstruct
}

deployment {
  deploymentType kubernetes
  dockerRepositoryName "subscriptionManagementService"
  monitoring prometheus
}

entity ExternalUser {
  id UUID required unique,
  externalUserId String required unique
}

//Связь клиента и подписки
entity ClientSubscription {
  id UUID required unique,
  startDttm LocalDate required,
  endDttm LocalDate required,
  status SubscriptionStatus required
}

//Описание подписки
entity SubscriptionDetails {
  id UUID required unique,
  name String required,
  description String,
  price BigDecimal required,
  duration Integer required
}

//Реферальная программа
entity ReferralProgram {
  id UUID required unique,
  name String required,
  referralCode String required unique,
  description String,
  startDttm LocalDate required,
  endDttm LocalDate required,
  rewardAmount BigDecimal required,
  status ReferralStatus required
}

//Платеж
entity Payment {
  id UUID required unique,
  amount BigDecimal required,
  status PaymentStatus required,
  paymentDttm LocalDate required,
  hashSum String required
}

//Платежная система
entity PaymentSystem {
  id UUID required unique,
  name String required unique
}

//Название сервиса или приложения
entity SourceApplication {
  id UUID required unique,
  applicationName String required unique
}

enum SubscriptionStatus {
  ACTIVE, EXPIRED, CANCELLED
}

enum ReferralStatus {
  PENDING, COMPLETED, EXPIRED
}

enum PaymentStatus {
  PENDING, COMPLETED, FAILED
}

relationship ManyToOne {
  ClientSubscription{user} to ExternalUser,
  ClientSubscription{subscriptionDetails} to SubscriptionDetails,
  ExternalUser{referralProgram} to ReferralProgram,
  Payment{user} to ExternalUser,
  SourceApplication{user} to ExternalUser,
  Payment{clietntSubscription} to ClientSubscription
  Payment{paymentSystem} to PaymentSystem
}

relationship OneToOne {
  ExternalUser{referralCreator} to ReferralProgram,
  Payment{clientSubscription} to ClientSubscription
}

relationship OneToMany {
  SourceApplication{referralPrograms} to ReferralProgram,
  SourceApplication{subscriptionDetails} to SubscriptionDetails
}

paginate ClientSubscription, Payment with infinite-scroll
